name: Deploy to Lightsail via ECR
on:
  push:
    branches: [ "main", "master" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_PAGER: ""

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Select Dockerfile
        id: df
        run: |
          if [ -f Dockerfile.hardened ]; then
            echo "path=Dockerfile.hardened" >> $GITHUB_OUTPUT
          else
            echo "path=Dockerfile" >> $GITHUB_OUTPUT
          fi

      - name: Build image
        run: docker build -t bot:latest -f ${{ steps.df.outputs.path }} .

      - name: Login to ECR, create repo if missing, push
        id: ecr
        run: |
          set -euo pipefail
          REGION="${{ secrets.AWS_REGION }}"
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)

          # беремо значення з секрету, а якщо порожнє — дефолт 'olxbot'
          REPO="${{ secrets.ECR_REPOSITORY }}"
          : "${REPO:=olxbot}"

          ECR_REG="${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com"
          ECR_URI="${ECR_REG}/${REPO}:latest"

          # login
          aws ecr get-login-password --region "$REGION" \
            | docker login --username AWS --password-stdin "$ECR_REG"

          # create repo if absent
          aws ecr describe-repositories --repository-names "$REPO" --region "$REGION" >/dev/null 2>&1 \
            || aws ecr create-repository --repository-name "$REPO" --region "$REGION"

          docker tag bot:latest "$ECR_URI"
          docker push "$ECR_URI"

          echo "uri=$ECR_URI" >> $GITHUB_OUTPUT
          echo "Pushed: $ECR_URI"

      - name: Create deployment spec (no publicEndpoint)
        run: |
          cat > spec.json <<'JSON'
          {
            "serviceName": "${{ secrets.LIGHTSAIL_SERVICE_NAME }}",
            "containers": {
              "bot": {
                "image": "${{ steps.ecr.outputs.uri }}",
                "environment": {
                  "BOT_TOKEN": "${{ secrets.BOT_TOKEN }}",
                  "MONOBANK_TOKEN": "${{ secrets.MONOBANK_TOKEN }}",
                  "MONOBANK_ACCOUNT_ID": "${{ secrets.MONOBANK_ACCOUNT_ID }}",
                  "DB_CONNECTION_STRING": "${{ secrets.DB_CONNECTION_STRING }}",
                  "CHANNEL_USERNAME": "${{ secrets.CHANNEL_USERNAME }}",
                  "ADMIN_CHAT_ID": "${{ secrets.ADMIN_CHAT_ID }}",
                  "BOT_USERNAME": "${{ secrets.BOT_USERNAME }}",
                  "MONO_JAR_URL": "${{ secrets.MONO_JAR_URL }}"
                },
                "command": ["TelegramOlxBot.dll"],
                "ports": {}
              }
            }
          }
          JSON
          cat spec.json

      - name: Deploy to Lightsail
        run: |
          aws lightsail create-container-service-deployment \
            --service-name "${{ secrets.LIGHTSAIL_SERVICE_NAME }}" \
            --cli-input-json file://spec.json \
            --region "${{ secrets.AWS_REGION }}"

      - name: Verify deployment
        run: |
          aws lightsail get-container-services \
            --service-name "${{ secrets.LIGHTSAIL_SERVICE_NAME }}" \
            --region "${{ secrets.AWS_REGION }}"
