// AutoCleanupService.cs
using System;
using System.Threading;
using System.Threading.Tasks;
using Telegram.Bot;
using Telegram.Bot.Exceptions;
using Telegram.Bot.Types;
using Services.Interfaces;

namespace Services
{
    public class AutoCleanupService
    {
        private readonly IConfirmedPaymentsService _confirmedPaymentsService;
        private readonly IPostDraftService _postDraftService;
        private readonly ITelegramBotClient _botClient;
        private readonly CancellationToken _cancellationToken;

        // –î–ª—è —Ç–µ—Å—Ç—ñ–≤: 1 —Ö–≤. –ù–∞ –ø—Ä–æ–¥—ñ –≤–∏—Å—Ç–∞–≤ —Å–≤—ñ–π –ø–æ—Ä—ñ–≥ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 47 –∞–±–æ 48 –≥–æ–¥–∏–Ω).
        private static readonly TimeSpan CleanupAge = TimeSpan.FromHours(45);

        public AutoCleanupService(
            IConfirmedPaymentsService confirmedPaymentsService,
            IPostDraftService postDraftService,
            ITelegramBotClient botClient,
            CancellationToken cancellationToken)
        {
            _confirmedPaymentsService = confirmedPaymentsService;
            _postDraftService = postDraftService;
            _botClient = botClient;
            _cancellationToken = cancellationToken;
        }

        public async Task RunAsync()
        {
            while (!_cancellationToken.IsCancellationRequested)
            {
                try
                {
                    Console.WriteLine("üßπ AutoCleanupService started");
                    var allPayments = await _confirmedPaymentsService.GetAllAsync();
                    var now = DateTime.UtcNow;

                    foreach (var payment in allPayments)
                    {
                        var post = payment.Post;
                        if (post == null || post.PublishedAt == null || post.ChannelMessageId == null)
                            continue;

                        var age = now - post.PublishedAt.Value;
                        Console.WriteLine($"Age:{age}\nPublished:{post.PublishedAt.Value:O}\nMsgId:{post.ChannelMessageId}");

                        if (age < CleanupAge)
                            continue;

                        var messageId = post.ChannelMessageId.Value;

                        // 1) –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–º–∞–≥–∞—î–º–æ—Å—å –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–∞–Ω–∞–ª—É
                        var tgDeleted = await TryDeleteFromChannelAsync(messageId, _cancellationToken);
                        if (!tgDeleted)
                        {
                            // –Ø–∫ —É CallbackHandler: —è–∫—â–æ TG –≤–∏–¥–∞–ª–∏—Ç–∏ –Ω–µ –≤–¥–∞–ª–æ—Å—å ‚Äî –ë–î –ù–ï —á—ñ–ø–∞—î–º–æ
                            continue;
                        }

                        // 2) –Ø–∫—â–æ Telegram —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–∏–≤ ‚Äî —á–∏—Å—Ç–∏–º–æ –ë–î (–ø–ª–∞—Ç—ñ–∂ + –¥—Ä–∞—Ñ—Ç–∏)
                        await _confirmedPaymentsService.RemoveAsync(payment);

                        try
                        {
                            var affected = await _postDraftService.RemoveByChannelMessageIdAsync(messageId);
                            if (affected == 0)
                            {
                                await _postDraftService.RemoveByPostIdAsync(payment.PostId);
                            }
                        }
                        catch (Exception ex2)
                        {
                            Console.WriteLine($"[AUTO] WARN drafts cleanup failed: {ex2.Message}");
                        }

                        Console.WriteLine($"üßπ Deleted msgId={messageId}; DB cleaned paymentId={payment.Id}");
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"‚ùå AutoCleanupService error: {ex}");
                }

                // –ß–∞—Å—Ç–æ—Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫ 1 –≥–æ–¥–∏–Ω–∞(—Ç—É—Ç 1 —Ö–≤ –¥–ª—è —Ç–µ—Å—Ç—ñ–≤)
                await Task.Delay(TimeSpan.FromHours(1), _cancellationToken);
            }
        }

        // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        // –ü—Ä–∏–≤–∞—Ç–Ω–∏–π —Ö–µ–ª–ø–µ—Ä: –≤–∏–∫–æ–Ω—É—î –ª–∏—à–µ TG-–≤–∏–¥–∞–ª–µ–Ω–Ω—è. –ù–∞ –ø–æ–º–∏–ª—Ü—ñ –ø–æ–≤–µ—Ä—Ç–∞—î false.
        // –ë–∞–∑—É –¥–∞–Ω–∏—Ö —Ç—É—Ç –Ω–µ —á—ñ–ø–∞—î–º–æ ‚Äî —Ü–µ —Ä–æ–±–∏—Ç—å—Å—è –≤–∏—â–µ –ø—ñ—Å–ª—è —É—Å–ø—ñ—Ö—É TG.
        private async Task<bool> TryDeleteFromChannelAsync(int channelMessageId, CancellationToken ct)
        {
            try
            {
                var chatId = ResolveChannelChatId(); // –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ -100‚Ä¶ –∞–±–æ @username
                await _botClient.DeleteMessageAsync(chatId, channelMessageId, ct);
                return true;
            }
            catch (ApiRequestException ex)
            {
                // –¢–∏–ø–æ–≤—ñ –∫–µ–π—Å–∏: >48 –≥–æ–¥, –Ω–µ–º–∞—î –ø—Ä–∞–≤ delete_messages, "message to delete not found" —Ç–æ—â–æ.
                Console.WriteLine($"‚ö†Ô∏è Cleanup: TG delete FAIL msgId={channelMessageId}: {ex.Message}");
                return false; // –ë–î –Ω–µ —á—ñ–ø–∞—î–º–æ
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå Cleanup: unexpected TG err msgId={channelMessageId}: {ex}");
                return false; // –ë–î –Ω–µ —á—ñ–ø–∞—î–º–æ
            }
        }

        // –°—Ç–∞–±—ñ–ª—å–Ω–æ —Ñ–æ—Ä–º—É—î–º–æ ChatId –¥–ª—è –∫–∞–Ω–∞–ª—É:
        // 1) –Ø–∫—â–æ —î CHANNEL_ID (—Ç–∏–ø—É -100xxxxxxxxxx) —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ ‚Äî –±–µ—Ä–µ–º–æ –π–æ–≥–æ.
        // 2) –Ü–Ω–∞–∫—à–µ ‚Äî –ø–∞–¥–∞—î–º–æ –Ω–∞ @username –∑ Program.ChannelUsername (—è–∫ —É —Ç–≤–æ—î–º—É —ñ—Å–Ω—É—é—á–æ–º—É –∫–æ–¥—ñ).
        private ChatId ResolveChannelChatId()
        {
            var channelIdEnv = Environment.GetEnvironmentVariable("CHANNEL_ID");
            if (long.TryParse(channelIdEnv, out var numeric))
                return new ChatId(numeric);

            // Fallback –¥–æ username, —è–∫—â–æ numeric id –Ω–µ –∑–∞–¥–∞–Ω–∏–π
            return new ChatId(Program.ChannelUsername);
        }
    }
}
