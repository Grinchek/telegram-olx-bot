using Telegram.Bot;
using Telegram.Bot.Types;
using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Services;
using Services.Interfaces;
using Telegram.Bot.Exceptions;

public class AutoCleanupService
{
    private readonly IConfirmedPaymentsService _confirmedPaymentsService;
    private readonly IPostDraftService _postDraftSeevice;
    private readonly ITelegramBotClient _botClient;
    private readonly CancellationToken _cancellationToken;

    // 47 –≥–æ–¥–∏–Ω –ø–æ—Ä—ñ–≥ –¥–ª—è –∞–≤—Ç–æ-–≤–∏–¥–∞–ª–µ–Ω–Ω—è
    private static readonly TimeSpan CleanupAge = TimeSpan.FromHours(45);

    public AutoCleanupService(
        IConfirmedPaymentsService confirmedPaymentsService,
        IPostDraftService postDraftService,
        ITelegramBotClient botClient,
        CancellationToken cancellationToken)
    {
        _confirmedPaymentsService = confirmedPaymentsService;
        _postDraftSeevice = postDraftService;
        _botClient = botClient;
        _cancellationToken = cancellationToken;
    }

    public async Task RunAsync()
    {
        while (!_cancellationToken.IsCancellationRequested)
        {
            try
            {
                Console.WriteLine("üßπ AutoCleanupService started");
                var allPosts = await _confirmedPaymentsService.GetAllAsync();
                var now = DateTime.UtcNow;

                foreach (var payment in allPosts)
                {
                    var post = payment.Post;
                    if (post == null || post.PublishedAt == null || post.ChannelMessageId == null)
                        continue;

                    var age = now - post.PublishedAt.Value;
                    Console.WriteLine($"Age:{age}\nPublished:{post.PublishedAt.Value:O}\nMsgId:{post.ChannelMessageId}");

                    if (age >= CleanupAge)
                    {
                        try
                        {
                            // 1) –°–ø–æ—á–∞—Ç–∫—É –≤–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–∞–Ω–∞–ª—É
                            var channel = new ChatId(Program.ChannelUsername);
                            await _botClient.DeleteMessageAsync(
                                chatId: channel,
                                messageId: post.ChannelMessageId.Value,
                                cancellationToken: _cancellationToken);

                            // 2) –ü—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è ‚Äî —á–∏—Å—Ç–∏–º–æ –ë–î
                            await _confirmedPaymentsService.RemoveAsync(payment);

                            var removedByMsgId = await _postDraftSeevice.RemoveByChannelMessageIdAsync(post.ChannelMessageId.Value);
                            if (removedByMsgId == 0)
                            {
                                await _postDraftSeevice.RemoveByPostIdAsync(payment.PostId);
                            }

                            Console.WriteLine($"üßπ –í–∏–¥–∞–ª–µ–Ω–æ –ø–æ—Å—Ç ID={payment.Id}, –≤—ñ–∫: {age.TotalHours:F1} –≥–æ–¥, msgId={post.ChannelMessageId.Value}");
                        }
                        catch (ApiRequestException ex)
                        {
                            // –ë—É–≤–∞—î: >48 –≥–æ–¥, –Ω–µ–º–∞—î –ø—Ä–∞–≤ delete_messages, "message to delete not found" —Ç–æ—â–æ.
                            Console.WriteLine($"‚ö†Ô∏è Cleanup: –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ msgId={post.ChannelMessageId.Value}: {ex.Message}");
                            // –í–ê–ñ–õ–ò–í–û: –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ Telegram ‚Äî –Ω–µ –≤–∏–¥–∞–ª—è—î–º–æ —Ä—è–¥–∫–∏ –∑ –ë–î.
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine($"‚ùå Cleanup unexpected error for msgId={post.ChannelMessageId.Value}: {ex}");
                            // –ë–î —Ç–∞–∫–æ–∂ –Ω–µ —á—ñ–ø–∞—î–º–æ
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå AutoCleanupService error: {ex}");
            }

            // –ß–∞—Å—Ç–æ—Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫: –∫–æ–∂–Ω—ñ 1 –≥–æ–¥–∏–Ω—É
            await Task.Delay(TimeSpan.FromHours(1), _cancellationToken);
        }
    }
}
